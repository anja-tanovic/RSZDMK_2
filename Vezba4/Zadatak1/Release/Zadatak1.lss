
Zadatak1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000070e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  00000782  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  88:	0c 94 85 03 	jmp	0x70a	; 0x70a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <RunConversion>:
  90:	80 91 7a 00 	lds	r24, 0x007A
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	66 e0       	ldi	r22, 0x06	; 6
  98:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
  9c:	80 93 7a 00 	sts	0x007A, r24
  a0:	80 91 7a 00 	lds	r24, 0x007A
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	64 e0       	ldi	r22, 0x04	; 4
  a8:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
  ac:	89 2b       	or	r24, r25
  ae:	c1 f3       	breq	.-16     	; 0xa0 <RunConversion+0x10>
  b0:	08 95       	ret

000000b2 <SetChannel>:
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	f8 2e       	mov	r15, r24
  ba:	0c e7       	ldi	r16, 0x7C	; 124
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	f8 01       	movw	r30, r16
  c0:	80 81       	ld	r24, Z
  c2:	6f 2d       	mov	r22, r15
  c4:	0e 94 2d 01 	call	0x25a	; 0x25a <BitmaskSet>
  c8:	f8 01       	movw	r30, r16
  ca:	80 83       	st	Z, r24
  cc:	8f 2d       	mov	r24, r15
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 32 01 	call	0x264	; 0x264 <Not>
  d4:	6f e1       	ldi	r22, 0x1F	; 31
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	0e 94 37 01 	call	0x26e	; 0x26e <And>
  dc:	68 2f       	mov	r22, r24
  de:	f8 01       	movw	r30, r16
  e0:	80 81       	ld	r24, Z
  e2:	0e 94 2f 01 	call	0x25e	; 0x25e <BitmaskClear>
  e6:	f8 01       	movw	r30, r16
  e8:	80 83       	st	Z, r24
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	ff 90       	pop	r15
  f0:	08 95       	ret

000000f2 <SetPrescaler>:
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	f8 2e       	mov	r15, r24
  fa:	0a e7       	ldi	r16, 0x7A	; 122
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	f8 01       	movw	r30, r16
 100:	80 81       	ld	r24, Z
 102:	6f 2d       	mov	r22, r15
 104:	0e 94 2d 01 	call	0x25a	; 0x25a <BitmaskSet>
 108:	f8 01       	movw	r30, r16
 10a:	80 83       	st	Z, r24
 10c:	8f 2d       	mov	r24, r15
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 32 01 	call	0x264	; 0x264 <Not>
 114:	67 e0       	ldi	r22, 0x07	; 7
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 37 01 	call	0x26e	; 0x26e <And>
 11c:	68 2f       	mov	r22, r24
 11e:	f8 01       	movw	r30, r16
 120:	80 81       	ld	r24, Z
 122:	0e 94 2f 01 	call	0x25e	; 0x25e <BitmaskClear>
 126:	f8 01       	movw	r30, r16
 128:	80 83       	st	Z, r24
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	08 95       	ret

00000132 <SetEnable>:
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	39 f4       	brne	.+14     	; 0x144 <SetEnable+0x12>
 136:	80 91 7a 00 	lds	r24, 0x007A
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	67 e0       	ldi	r22, 0x07	; 7
 13e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 142:	06 c0       	rjmp	.+12     	; 0x150 <SetEnable+0x1e>
 144:	80 91 7a 00 	lds	r24, 0x007A
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	67 e0       	ldi	r22, 0x07	; 7
 14c:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 150:	80 93 7a 00 	sts	0x007A, r24
 154:	08 95       	ret

00000156 <SetVref>:
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	18 2f       	mov	r17, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	67 e0       	ldi	r22, 0x07	; 7
 160:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 164:	08 2f       	mov	r16, r24
 166:	81 2f       	mov	r24, r17
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	66 e0       	ldi	r22, 0x06	; 6
 16c:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 170:	18 2f       	mov	r17, r24
 172:	00 23       	and	r16, r16
 174:	39 f0       	breq	.+14     	; 0x184 <SetVref+0x2e>
 176:	80 91 7c 00 	lds	r24, 0x007C
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	67 e0       	ldi	r22, 0x07	; 7
 17e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 182:	06 c0       	rjmp	.+12     	; 0x190 <SetVref+0x3a>
 184:	80 91 7c 00 	lds	r24, 0x007C
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	67 e0       	ldi	r22, 0x07	; 7
 18c:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 190:	80 93 7c 00 	sts	0x007C, r24
 194:	11 23       	and	r17, r17
 196:	39 f0       	breq	.+14     	; 0x1a6 <SetVref+0x50>
 198:	80 91 7c 00 	lds	r24, 0x007C
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	66 e0       	ldi	r22, 0x06	; 6
 1a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <SetVref+0x5c>
 1a6:	80 91 7c 00 	lds	r24, 0x007C
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	66 e0       	ldi	r22, 0x06	; 6
 1ae:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 1b2:	80 93 7c 00 	sts	0x007C, r24
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <InitADC>:
 1bc:	1f 93       	push	r17
 1be:	16 2f       	mov	r17, r22
 1c0:	0e 94 ab 00 	call	0x156	; 0x156 <SetVref>
 1c4:	81 2f       	mov	r24, r17
 1c6:	0e 94 79 00 	call	0xf2	; 0xf2 <SetPrescaler>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 99 00 	call	0x132	; 0x132 <SetEnable>
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <ReadADC>:
 1d4:	0e 94 59 00 	call	0xb2	; 0xb2 <SetChannel>
 1d8:	0e 94 48 00 	call	0x90	; 0x90 <RunConversion>
 1dc:	80 91 79 00 	lds	r24, 0x0079
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	68 e0       	ldi	r22, 0x08	; 8
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 43 01 	call	0x286	; 0x286 <ShiftLeft>
 1ea:	20 91 78 00 	lds	r18, 0x0078
 1ee:	82 0f       	add	r24, r18
 1f0:	91 1d       	adc	r25, r1
 1f2:	08 95       	ret

000001f4 <SetBit>:
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <SetBit+0xa>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <SetBit+0x6>
 202:	28 2b       	or	r18, r24
 204:	39 2b       	or	r19, r25
 206:	c9 01       	movw	r24, r18
 208:	08 95       	ret

0000020a <ClearBit>:
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <ClearBit+0xa>
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <ClearBit+0x6>
 218:	20 95       	com	r18
 21a:	30 95       	com	r19
 21c:	28 23       	and	r18, r24
 21e:	39 23       	and	r19, r25
 220:	c9 01       	movw	r24, r18
 222:	08 95       	ret

00000224 <ToggleBit>:
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <ToggleBit+0xa>
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <ToggleBit+0x6>
 232:	28 27       	eor	r18, r24
 234:	39 27       	eor	r19, r25
 236:	c9 01       	movw	r24, r18
 238:	08 95       	ret

0000023a <CheckBit>:
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <CheckBit+0xa>
 240:	22 0f       	add	r18, r18
 242:	33 1f       	adc	r19, r19
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <CheckBit+0x6>
 248:	28 23       	and	r18, r24
 24a:	39 23       	and	r19, r25
 24c:	21 15       	cp	r18, r1
 24e:	31 05       	cpc	r19, r1
 250:	11 f0       	breq	.+4      	; 0x256 <CheckBit+0x1c>
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	c9 01       	movw	r24, r18
 258:	08 95       	ret

0000025a <BitmaskSet>:
 25a:	86 2b       	or	r24, r22
 25c:	08 95       	ret

0000025e <BitmaskClear>:
 25e:	60 95       	com	r22
 260:	86 23       	and	r24, r22
 262:	08 95       	ret

00000264 <Not>:
 264:	9c 01       	movw	r18, r24
 266:	20 95       	com	r18
 268:	30 95       	com	r19
 26a:	c9 01       	movw	r24, r18
 26c:	08 95       	ret

0000026e <And>:
 26e:	68 23       	and	r22, r24
 270:	79 23       	and	r23, r25
 272:	cb 01       	movw	r24, r22
 274:	08 95       	ret

00000276 <Or>:
 276:	68 2b       	or	r22, r24
 278:	79 2b       	or	r23, r25
 27a:	cb 01       	movw	r24, r22
 27c:	08 95       	ret

0000027e <Xor>:
 27e:	68 27       	eor	r22, r24
 280:	79 27       	eor	r23, r25
 282:	cb 01       	movw	r24, r22
 284:	08 95       	ret

00000286 <ShiftLeft>:
 286:	9c 01       	movw	r18, r24
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	03 c0       	rjmp	.+6      	; 0x292 <ShiftLeft+0xc>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	4f 5f       	subi	r20, 0xFF	; 255
 292:	84 2f       	mov	r24, r20
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	86 17       	cp	r24, r22
 298:	97 07       	cpc	r25, r23
 29a:	c0 f3       	brcs	.-16     	; 0x28c <ShiftLeft+0x6>
 29c:	c9 01       	movw	r24, r18
 29e:	08 95       	ret

000002a0 <ShiftRight>:
 2a0:	9c 01       	movw	r18, r24
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <ShiftRight+0x8>
 2a4:	36 95       	lsr	r19
 2a6:	27 95       	ror	r18
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <ShiftRight+0x4>
 2ac:	c9 01       	movw	r24, r18
 2ae:	08 95       	ret

000002b0 <main>:
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	65 e0       	ldi	r22, 0x05	; 5
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	0e 94 c1 02 	call	0x582	; 0x582 <pinInit>
 2c0:	0e 94 42 03 	call	0x684	; 0x684 <timer0InteruptInit>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	66 e0       	ldi	r22, 0x06	; 6
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 43 01 	call	0x286	; 0x286 <ShiftLeft>
 2d0:	67 e0       	ldi	r22, 0x07	; 7
 2d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <InitADC>
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ReadADC>
 2dc:	0e 94 9c 01 	call	0x338	; 0x338 <InitRand>
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	68 e0       	ldi	r22, 0x08	; 8
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 55 02 	call	0x4aa	; 0x4aa <RandRange>
 2ec:	ec 01       	movw	r28, r24
 2ee:	10 e0       	ldi	r17, 0x00	; 0
 2f0:	17 c0       	rjmp	.+46     	; 0x320 <main+0x70>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <pinSetValue>
 2fc:	6c e2       	ldi	r22, 0x2C	; 44
 2fe:	71 e0       	ldi	r23, 0x01	; 1
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 14 03 	call	0x628	; 0x628 <timer0DelayMs>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	65 e0       	ldi	r22, 0x05	; 5
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <pinSetValue>
 312:	6c e2       	ldi	r22, 0x2C	; 44
 314:	71 e0       	ldi	r23, 0x01	; 1
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 14 03 	call	0x628	; 0x628 <timer0DelayMs>
 31e:	1f 5f       	subi	r17, 0xFF	; 255
 320:	81 2f       	mov	r24, r17
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	8c 17       	cp	r24, r28
 326:	9d 07       	cpc	r25, r29
 328:	20 f3       	brcs	.-56     	; 0x2f2 <main+0x42>
 32a:	60 ed       	ldi	r22, 0xD0	; 208
 32c:	77 e0       	ldi	r23, 0x07	; 7
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 14 03 	call	0x628	; 0x628 <timer0DelayMs>
 336:	d4 cf       	rjmp	.-88     	; 0x2e0 <main+0x30>

00000338 <InitRand>:
 338:	90 93 06 01 	sts	0x0106, r25
 33c:	80 93 05 01 	sts	0x0105, r24
 340:	08 95       	ret

00000342 <SetDirection>:
 342:	80 93 00 01 	sts	0x0100, r24
 346:	08 95       	ret

00000348 <GetMSB>:
 348:	6f e0       	ldi	r22, 0x0F	; 15
 34a:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 34e:	08 95       	ret

00000350 <GetLSB>:
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 356:	08 95       	ret

00000358 <ShiftAndToggle>:
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
 366:	16 2f       	mov	r17, r22
 368:	80 91 05 01 	lds	r24, 0x0105
 36c:	90 91 06 01 	lds	r25, 0x0106
 370:	20 91 00 01 	lds	r18, 0x0100
 374:	22 23       	and	r18, r18
 376:	21 f0       	breq	.+8      	; 0x380 <ShiftAndToggle+0x28>
 378:	21 30       	cpi	r18, 0x01	; 1
 37a:	09 f0       	breq	.+2      	; 0x37e <ShiftAndToggle+0x26>
 37c:	6e c0       	rjmp	.+220    	; 0x45a <ShiftAndToggle+0x102>
 37e:	35 c0       	rjmp	.+106    	; 0x3ea <ShiftAndToggle+0x92>
 380:	ce 01       	movw	r24, r28
 382:	6e e0       	ldi	r22, 0x0E	; 14
 384:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 388:	08 2f       	mov	r16, r24
 38a:	ce 01       	movw	r24, r28
 38c:	6d e0       	ldi	r22, 0x0D	; 13
 38e:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 392:	f8 2e       	mov	r15, r24
 394:	ce 01       	movw	r24, r28
 396:	6b e0       	ldi	r22, 0x0B	; 11
 398:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 39c:	e8 2e       	mov	r14, r24
 39e:	ce 01       	movw	r24, r28
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ShiftRight>
 3a8:	11 23       	and	r17, r17
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <ShiftAndToggle+0x5c>
 3ac:	6f e0       	ldi	r22, 0x0F	; 15
 3ae:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <ShiftAndToggle+0x62>
 3b4:	6f e0       	ldi	r22, 0x0F	; 15
 3b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 3ba:	10 17       	cp	r17, r16
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <ShiftAndToggle+0x6e>
 3be:	6d e0       	ldi	r22, 0x0D	; 13
 3c0:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <ShiftAndToggle+0x74>
 3c6:	6d e0       	ldi	r22, 0x0D	; 13
 3c8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 3cc:	1f 15       	cp	r17, r15
 3ce:	21 f4       	brne	.+8      	; 0x3d8 <ShiftAndToggle+0x80>
 3d0:	6c e0       	ldi	r22, 0x0C	; 12
 3d2:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <ShiftAndToggle+0x86>
 3d8:	6c e0       	ldi	r22, 0x0C	; 12
 3da:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 3de:	1e 15       	cp	r17, r14
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <ShiftAndToggle+0x8e>
 3e2:	6a e0       	ldi	r22, 0x0A	; 10
 3e4:	34 c0       	rjmp	.+104    	; 0x44e <ShiftAndToggle+0xf6>
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	36 c0       	rjmp	.+108    	; 0x456 <ShiftAndToggle+0xfe>
 3ea:	ce 01       	movw	r24, r28
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 3f2:	08 2f       	mov	r16, r24
 3f4:	ce 01       	movw	r24, r28
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 3fc:	f8 2e       	mov	r15, r24
 3fe:	ce 01       	movw	r24, r28
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 406:	e8 2e       	mov	r14, r24
 408:	ce 01       	movw	r24, r28
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ShiftRight>
 412:	11 23       	and	r17, r17
 414:	21 f4       	brne	.+8      	; 0x41e <ShiftAndToggle+0xc6>
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 41c:	03 c0       	rjmp	.+6      	; 0x424 <ShiftAndToggle+0xcc>
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 424:	10 17       	cp	r17, r16
 426:	21 f4       	brne	.+8      	; 0x430 <ShiftAndToggle+0xd8>
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 42e:	03 c0       	rjmp	.+6      	; 0x436 <ShiftAndToggle+0xde>
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 436:	1f 15       	cp	r17, r15
 438:	21 f4       	brne	.+8      	; 0x442 <ShiftAndToggle+0xea>
 43a:	63 e0       	ldi	r22, 0x03	; 3
 43c:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 440:	03 c0       	rjmp	.+6      	; 0x448 <ShiftAndToggle+0xf0>
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 448:	1e 15       	cp	r17, r14
 44a:	21 f4       	brne	.+8      	; 0x454 <ShiftAndToggle+0xfc>
 44c:	65 e0       	ldi	r22, 0x05	; 5
 44e:	0e 94 05 01 	call	0x20a	; 0x20a <ClearBit>
 452:	03 c0       	rjmp	.+6      	; 0x45a <ShiftAndToggle+0x102>
 454:	65 e0       	ldi	r22, 0x05	; 5
 456:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SetBit>
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	08 95       	ret

00000468 <Rand>:
 468:	80 91 00 01 	lds	r24, 0x0100
 46c:	88 23       	and	r24, r24
 46e:	21 f0       	breq	.+8      	; 0x478 <Rand+0x10>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	41 f0       	breq	.+16     	; 0x484 <Rand+0x1c>
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	0e c0       	rjmp	.+28     	; 0x494 <Rand+0x2c>
 478:	80 91 05 01 	lds	r24, 0x0105
 47c:	90 91 06 01 	lds	r25, 0x0106
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	05 c0       	rjmp	.+10     	; 0x48e <Rand+0x26>
 484:	80 91 05 01 	lds	r24, 0x0105
 488:	90 91 06 01 	lds	r25, 0x0106
 48c:	6f e0       	ldi	r22, 0x0F	; 15
 48e:	0e 94 1d 01 	call	0x23a	; 0x23a <CheckBit>
 492:	68 2f       	mov	r22, r24
 494:	80 91 05 01 	lds	r24, 0x0105
 498:	90 91 06 01 	lds	r25, 0x0106
 49c:	0e 94 ac 01 	call	0x358	; 0x358 <ShiftAndToggle>
 4a0:	80 93 05 01 	sts	0x0105, r24
 4a4:	90 93 06 01 	sts	0x0106, r25
 4a8:	08 95       	ret

000004aa <RandRange>:
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	8c 01       	movw	r16, r24
 4b4:	7b 01       	movw	r14, r22
 4b6:	0e 94 34 02 	call	0x468	; 0x468 <Rand>
 4ba:	e0 1a       	sub	r14, r16
 4bc:	f1 0a       	sbc	r15, r17
 4be:	08 94       	sec
 4c0:	e1 1c       	adc	r14, r1
 4c2:	f1 1c       	adc	r15, r1
 4c4:	b7 01       	movw	r22, r14
 4c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__udivmodhi4>
 4ca:	9c 01       	movw	r18, r24
 4cc:	20 0f       	add	r18, r16
 4ce:	31 1f       	adc	r19, r17
 4d0:	c9 01       	movw	r24, r18
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <pinSetValue>:
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	f9 f0       	breq	.+62     	; 0x51e <pinSetValue+0x42>
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	20 f0       	brcs	.+8      	; 0x4ec <pinSetValue+0x10>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	09 f0       	breq	.+2      	; 0x4ea <pinSetValue+0xe>
 4e8:	4b c0       	rjmp	.+150    	; 0x580 <pinSetValue+0xa4>
 4ea:	32 c0       	rjmp	.+100    	; 0x550 <pinSetValue+0x74>
 4ec:	41 30       	cpi	r20, 0x01	; 1
 4ee:	59 f4       	brne	.+22     	; 0x506 <pinSetValue+0x2a>
 4f0:	25 b1       	in	r18, 0x05	; 5
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <pinSetValue+0x20>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <pinSetValue+0x1c>
 500:	28 2b       	or	r18, r24
 502:	25 b9       	out	0x05, r18	; 5
 504:	08 95       	ret
 506:	25 b1       	in	r18, 0x05	; 5
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <pinSetValue+0x36>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <pinSetValue+0x32>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	85 b9       	out	0x05, r24	; 5
 51c:	08 95       	ret
 51e:	41 30       	cpi	r20, 0x01	; 1
 520:	59 f4       	brne	.+22     	; 0x538 <pinSetValue+0x5c>
 522:	28 b1       	in	r18, 0x08	; 8
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <pinSetValue+0x52>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <pinSetValue+0x4e>
 532:	28 2b       	or	r18, r24
 534:	28 b9       	out	0x08, r18	; 8
 536:	08 95       	ret
 538:	28 b1       	in	r18, 0x08	; 8
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <pinSetValue+0x68>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <pinSetValue+0x64>
 548:	80 95       	com	r24
 54a:	82 23       	and	r24, r18
 54c:	88 b9       	out	0x08, r24	; 8
 54e:	08 95       	ret
 550:	41 30       	cpi	r20, 0x01	; 1
 552:	59 f4       	brne	.+22     	; 0x56a <pinSetValue+0x8e>
 554:	2b b1       	in	r18, 0x0b	; 11
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <pinSetValue+0x84>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <pinSetValue+0x80>
 564:	28 2b       	or	r18, r24
 566:	2b b9       	out	0x0b, r18	; 11
 568:	08 95       	ret
 56a:	2b b1       	in	r18, 0x0b	; 11
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <pinSetValue+0x9a>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <pinSetValue+0x96>
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	8b b9       	out	0x0b, r24	; 11
 580:	08 95       	ret

00000582 <pinInit>:
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	f9 f0       	breq	.+62     	; 0x5c4 <pinInit+0x42>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	20 f0       	brcs	.+8      	; 0x592 <pinInit+0x10>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	09 f0       	breq	.+2      	; 0x590 <pinInit+0xe>
 58e:	4b c0       	rjmp	.+150    	; 0x626 <pinInit+0xa4>
 590:	32 c0       	rjmp	.+100    	; 0x5f6 <pinInit+0x74>
 592:	41 30       	cpi	r20, 0x01	; 1
 594:	59 f4       	brne	.+22     	; 0x5ac <pinInit+0x2a>
 596:	24 b1       	in	r18, 0x04	; 4
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <pinInit+0x20>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <pinInit+0x1c>
 5a6:	28 2b       	or	r18, r24
 5a8:	24 b9       	out	0x04, r18	; 4
 5aa:	08 95       	ret
 5ac:	24 b1       	in	r18, 0x04	; 4
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <pinInit+0x36>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <pinInit+0x32>
 5bc:	80 95       	com	r24
 5be:	82 23       	and	r24, r18
 5c0:	84 b9       	out	0x04, r24	; 4
 5c2:	08 95       	ret
 5c4:	41 30       	cpi	r20, 0x01	; 1
 5c6:	59 f4       	brne	.+22     	; 0x5de <pinInit+0x5c>
 5c8:	27 b1       	in	r18, 0x07	; 7
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <pinInit+0x52>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <pinInit+0x4e>
 5d8:	28 2b       	or	r18, r24
 5da:	27 b9       	out	0x07, r18	; 7
 5dc:	08 95       	ret
 5de:	27 b1       	in	r18, 0x07	; 7
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <pinInit+0x68>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <pinInit+0x64>
 5ee:	80 95       	com	r24
 5f0:	82 23       	and	r24, r18
 5f2:	87 b9       	out	0x07, r24	; 7
 5f4:	08 95       	ret
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	59 f4       	brne	.+22     	; 0x610 <pinInit+0x8e>
 5fa:	2a b1       	in	r18, 0x0a	; 10
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <pinInit+0x84>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <pinInit+0x80>
 60a:	28 2b       	or	r18, r24
 60c:	2a b9       	out	0x0a, r18	; 10
 60e:	08 95       	ret
 610:	2a b1       	in	r18, 0x0a	; 10
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <pinInit+0x9a>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <pinInit+0x96>
 620:	80 95       	com	r24
 622:	82 23       	and	r24, r18
 624:	8a b9       	out	0x0a, r24	; 10
 626:	08 95       	ret

00000628 <timer0DelayMs>:
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	7b 01       	movw	r14, r22
 632:	8c 01       	movw	r16, r24
 634:	20 91 01 01 	lds	r18, 0x0101
 638:	30 91 02 01 	lds	r19, 0x0102
 63c:	40 91 03 01 	lds	r20, 0x0103
 640:	50 91 04 01 	lds	r21, 0x0104
 644:	80 91 01 01 	lds	r24, 0x0101
 648:	90 91 02 01 	lds	r25, 0x0102
 64c:	a0 91 03 01 	lds	r26, 0x0103
 650:	b0 91 04 01 	lds	r27, 0x0104
 654:	82 1b       	sub	r24, r18
 656:	93 0b       	sbc	r25, r19
 658:	a4 0b       	sbc	r26, r20
 65a:	b5 0b       	sbc	r27, r21
 65c:	8e 15       	cp	r24, r14
 65e:	9f 05       	cpc	r25, r15
 660:	a0 07       	cpc	r26, r16
 662:	b1 07       	cpc	r27, r17
 664:	78 f3       	brcs	.-34     	; 0x644 <timer0DelayMs+0x1c>
 666:	20 91 01 01 	lds	r18, 0x0101
 66a:	30 91 02 01 	lds	r19, 0x0102
 66e:	40 91 03 01 	lds	r20, 0x0103
 672:	50 91 04 01 	lds	r21, 0x0104
 676:	b9 01       	movw	r22, r18
 678:	ca 01       	movw	r24, r20
 67a:	1f 91       	pop	r17
 67c:	0f 91       	pop	r16
 67e:	ff 90       	pop	r15
 680:	ef 90       	pop	r14
 682:	08 95       	ret

00000684 <timer0InteruptInit>:
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	84 bd       	out	0x24, r24	; 36
 688:	93 e0       	ldi	r25, 0x03	; 3
 68a:	95 bd       	out	0x25, r25	; 37
 68c:	99 ef       	ldi	r25, 0xF9	; 249
 68e:	97 bd       	out	0x27, r25	; 39
 690:	80 93 6e 00 	sts	0x006E, r24
 694:	78 94       	sei
 696:	08 95       	ret

00000698 <__vector_14>:
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	80 91 01 01 	lds	r24, 0x0101
 6ae:	90 91 02 01 	lds	r25, 0x0102
 6b2:	a0 91 03 01 	lds	r26, 0x0103
 6b6:	b0 91 04 01 	lds	r27, 0x0104
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	a1 1d       	adc	r26, r1
 6be:	b1 1d       	adc	r27, r1
 6c0:	80 93 01 01 	sts	0x0101, r24
 6c4:	90 93 02 01 	sts	0x0102, r25
 6c8:	a0 93 03 01 	sts	0x0103, r26
 6cc:	b0 93 04 01 	sts	0x0104, r27
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__udivmodhi4>:
 6e2:	aa 1b       	sub	r26, r26
 6e4:	bb 1b       	sub	r27, r27
 6e6:	51 e1       	ldi	r21, 0x11	; 17
 6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <__udivmodhi4_ep>

000006ea <__udivmodhi4_loop>:
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	a6 17       	cp	r26, r22
 6f0:	b7 07       	cpc	r27, r23
 6f2:	10 f0       	brcs	.+4      	; 0x6f8 <__udivmodhi4_ep>
 6f4:	a6 1b       	sub	r26, r22
 6f6:	b7 0b       	sbc	r27, r23

000006f8 <__udivmodhi4_ep>:
 6f8:	88 1f       	adc	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	5a 95       	dec	r21
 6fe:	a9 f7       	brne	.-22     	; 0x6ea <__udivmodhi4_loop>
 700:	80 95       	com	r24
 702:	90 95       	com	r25
 704:	bc 01       	movw	r22, r24
 706:	cd 01       	movw	r24, r26
 708:	08 95       	ret

0000070a <_exit>:
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
